package com.yunhe.common.mapper;

import com.yunhe.common.model.domain.Tickets;
import com.yunhe.common.model.domain.TicketsExample;
import com.yunhe.common.model.domain.TicketsKey;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface TicketsMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickets
     *
     * @mbg.generated Mon Jan 11 12:58:19 CST 2021
     */
    @SelectProvider(type=TicketsSqlProvider.class, method="countByExample")
    long countByExample(TicketsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickets
     *
     * @mbg.generated Mon Jan 11 12:58:19 CST 2021
     */
    @DeleteProvider(type=TicketsSqlProvider.class, method="deleteByExample")
    int deleteByExample(TicketsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickets
     *
     * @mbg.generated Mon Jan 11 12:58:19 CST 2021
     */
    @Delete({
        "delete from tickets",
        "where SCENIC_SPOT_NAME = #{scenicSpotName,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(TicketsKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickets
     *
     * @mbg.generated Mon Jan 11 12:58:19 CST 2021
     */
    @Insert({
        "insert into tickets (SCENIC_SPOT_NAME, ADULT_TICKET_PRICE, ",
        "CHILD_TICKET_PRICE, REMAINING_TICKETS)",
        "values (#{scenicSpotName,jdbcType=VARCHAR}, #{adultTicketPrice,jdbcType=DOUBLE}, ",
        "#{childTicketPrice,jdbcType=DOUBLE}, #{remainingTickets,jdbcType=INTEGER})"
    })
    int insert(Tickets record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickets
     *
     * @mbg.generated Mon Jan 11 12:58:19 CST 2021
     */
    @InsertProvider(type=TicketsSqlProvider.class, method="insertSelective")
    int insertSelective(Tickets record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickets
     *
     * @mbg.generated Mon Jan 11 12:58:19 CST 2021
     */
    @SelectProvider(type=TicketsSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="SCENIC_SPOT_NAME", property="scenicSpotName", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="ADULT_TICKET_PRICE", property="adultTicketPrice", jdbcType=JdbcType.DOUBLE),
        @Result(column="CHILD_TICKET_PRICE", property="childTicketPrice", jdbcType=JdbcType.DOUBLE),
        @Result(column="REMAINING_TICKETS", property="remainingTickets", jdbcType=JdbcType.INTEGER)
    })
    List<Tickets> selectByExample(TicketsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickets
     *
     * @mbg.generated Mon Jan 11 12:58:19 CST 2021
     */
    @Select({
        "select",
        "SCENIC_SPOT_NAME, ADULT_TICKET_PRICE, CHILD_TICKET_PRICE, REMAINING_TICKETS",
        "from tickets",
        "where SCENIC_SPOT_NAME = #{scenicSpotName,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="SCENIC_SPOT_NAME", property="scenicSpotName", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="ADULT_TICKET_PRICE", property="adultTicketPrice", jdbcType=JdbcType.DOUBLE),
        @Result(column="CHILD_TICKET_PRICE", property="childTicketPrice", jdbcType=JdbcType.DOUBLE),
        @Result(column="REMAINING_TICKETS", property="remainingTickets", jdbcType=JdbcType.INTEGER)
    })
    Tickets selectByPrimaryKey(TicketsKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickets
     *
     * @mbg.generated Mon Jan 11 12:58:19 CST 2021
     */
    @UpdateProvider(type=TicketsSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") Tickets record, @Param("example") TicketsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickets
     *
     * @mbg.generated Mon Jan 11 12:58:19 CST 2021
     */
    @UpdateProvider(type=TicketsSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") Tickets record, @Param("example") TicketsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickets
     *
     * @mbg.generated Mon Jan 11 12:58:19 CST 2021
     */
    @UpdateProvider(type=TicketsSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Tickets record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickets
     *
     * @mbg.generated Mon Jan 11 12:58:19 CST 2021
     */
    @Update({
        "update tickets",
        "set ADULT_TICKET_PRICE = #{adultTicketPrice,jdbcType=DOUBLE},",
          "CHILD_TICKET_PRICE = #{childTicketPrice,jdbcType=DOUBLE},",
          "REMAINING_TICKETS = #{remainingTickets,jdbcType=INTEGER}",
        "where SCENIC_SPOT_NAME = #{scenicSpotName,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(Tickets record);
}